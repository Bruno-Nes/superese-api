# Dockerfile otimizado para Render - Reduzido e otimizado
FROM node:20.12.2-alpine

# Instalar dependências essenciais em uma única camada
RUN apk add --no-cache dumb-init curl libc6-compat && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Configurar npm para resolver conflitos de dependências
RUN npm config set legacy-peer-deps true && \
    npm config set fund false && \
    npm config set audit false

# Definir variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=3000

WORKDIR /app

# Copiar arquivos de configuração de dependências
COPY package*.json ./

# Instalar dependências incluindo devDependencies para build
RUN npm ci --include=dev && npm cache clean --force

# Copiar código fonte
COPY tsconfig*.json ./
COPY src ./src

# Build da aplicação
RUN npm run build

# Remover devDependencies após o build para reduzir tamanho
RUN npm prune --production

# Limpar arquivos desnecessários
RUN rm -rf src tsconfig*.json node_modules/.cache /tmp/* /var/tmp/*

# Configurar permissões
RUN chown -R nestjs:nodejs /app
USER nestjs

# Expor porta
EXPOSE $PORT

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:$PORT/v1/health || exit 1

# Comando para iniciar a aplicação
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "--max-old-space-size=512", "dist/main"]
